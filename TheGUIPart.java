import java.awt.*;import BreezyGUI.*;public class TheGUIPart extends GBFrame {	private int[][] board;	private int size;	private boolean isWhiteTurn;	private String color = "";	TheGUIPart(String boardColor) {		color = boardColor;		size = 3;		board = new int[size][size];		for (int row = 0; row < size; row++) {			for (int col = 0; col < size; col++) {				board[row][col] = 0;			}		}		isWhiteTurn = true;	}	public void paint(Graphics g) {		int x, y;		if (color.equals("red")) {			g.setColor(Color.red);			Image Valorant, Battlefield1;			Valorant = new Image("Valorant.png");			Battlefield1 = new Image("Battlefield1.jpeg");			for (int row = 0; row < size; row++) {				for (int col = 0; col < size; col++) {					x = col * 100 + 100;					y = row * 100 + 100;					g.drawRect(x, y, 100, 100);					if (board[row][col] == 1) {						Valorant.draw(g, x + 20, y + 20, 60, 60);					} else if (board[row][col] == -1) {						Battlefield1.draw(g, x + 20, y + 20, 60, 60);					}				}			}		}		if (color.equals("orange")) {			g.setColor(Color.orange);			Image Valorant, Battlefield1;			Valorant = new Image("Valorant.png");			Battlefield1 = new Image("Battlefield1.jpeg");			for (int row = 0; row < size; row++) {				for (int col = 0; col < size; col++) {					x = col * 100 + 100;					y = row * 100 + 100;					g.drawRect(x, y, 100, 100);					if (board[row][col] == 1) {						Valorant.draw(g, x + 20, y + 20, 60, 60);					} else if (board[row][col] == -1) {						Battlefield1.draw(g, x + 20, y + 20, 60, 60);					}				}			}		}	}		public boolean player1 () {		boolean win1 = false;		if(board[0][0] == -1 && board[1][0] == -1 && board[2][0] == -1)			win1 = true;		if(board[0][1] == -1 && board[1][1] == -1 && board[2][1] == -1)			win1 = true;		if(board[0][2] == -1 && board[1][2] == -1 && board[2][2] == -1)			win1 = true;				if(board[0][0] == -1 && board[0][1] == -1 && board[0][2] == -1)			win1 = true;		if(board[1][0] == -1 && board[1][1] == -1 && board[1][2] == -1)			win1 = true;		if(board[2][0] == -1 && board[2][1] == -1 && board[2][2] == -1)			win1 = true;				if(board[0][0] == -1 && board[1][1] == -1 && board[2][2] == -1)			win1 = true;		if(board[0][2] == -1 && board[1][1] == -1 && board[2][0] == -1)			win1 = true;				return win1;	}	public boolean player2 () {		boolean win2 = false;		if(board[0][0] == 1 && board[1][0] == 1 && board[2][0] == 1)			win2 = true;		if(board[0][1] == 1 && board[1][1] == 1 && board[2][1] == 1)			win2 = true;		if(board[0][2] == 1 && board[1][2] == 1 && board[2][2] == 1)			win2 = true;				if(board[0][0] == 1 && board[0][1] == 1 && board[0][2] == 1)			win2 = true;		if(board[1][0] == 1 && board[1][1] == 1 && board[1][2] == 1)			win2 = true;		if(board[2][0] == 1 && board[2][1] == 1 && board[2][2] == 1)			win2 = true;				if(board[0][0] == 1 && board[1][1] == 1 && board[2][2] == 1)			win2 = true;		if(board[0][2] == 1 && board[1][1] == 1 && board[2][0] == 1)			win2 = true;				return win2;	}		public boolean noWinner () {		boolean tie = false;		if(board[0][0] != 0 && board[1][0] != 0 && board[2][0] != 0 &&			board[0][1] != 0 && board[1][1] != 0 && board[2][1] != 0 &&			board[0][2] != 0 && board[1][2] != 0 && board[2][2] != 0 )			tie = true;				return tie;	}		public void mouseClicked(int x, int y) {		int row = (y - 100) / 100;		int col = (x - 100) / 100;		if (row < 0 || row >= size || col < 0 || col >= size) {			return; // clicked off the board		}		if (board[row][col] != 0) {			return; // square already full		}		if (isWhiteTurn) {			board[row][col] = -1;			isWhiteTurn = !isWhiteTurn; // change turns		} else  {			board[row][col] = 1;			isWhiteTurn = !isWhiteTurn; // change turns		}		repaint();		boolean p1Win = player1();		boolean p2Win = player2();		boolean tie = noWinner();		if (p1Win)		{				super.dispose(); //Get's rid of old board		    Frame win = new Winner1();		    win.setSize (1000, 450); //Sets window size		    win.setVisible(true); //Sets win window visible to user		}					else if (p2Win)		{			super.dispose(); //Get's rid of old board		    Frame win = new Winner2();		    win.setSize (1000, 450); //Sets window size		    win.setVisible(true); //Sets win window visible to user		}				else if(tie) {			super.dispose(); //Get's rid of old board					    Frame win = new WinnerNA();		    win.setSize (1000, 450); //Sets window size		    win.setVisible(true); //Sets win window visible to user		}	}}